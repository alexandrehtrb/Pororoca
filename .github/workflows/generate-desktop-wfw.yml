name: Generate Pororoca Desktop

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      rid:
        required: true
        type: string
      packaging:
        required: false
        type: string
      enableUITesting:
        required: true
        type: boolean
      uploadArtifactToRelease:
        required: false
        default: false
        type: boolean

jobs:
  generatePororocaDesktop:

    runs-on: ${{ inputs.os }} # we run many different builds

    # update (2023-12-11): let's try single-file publishing for Linux too
    env:
      OUTPUT_FOLDER: ${{ format('./out/{0}/', inputs.rid) }}
      PUBLISH_SINGLE_FILE: ${{ startsWith(inputs.rid, 'win') || startsWith(inputs.rid, 'linux') }}
      RID: ${{ inputs.rid }}
      WINDOWS_INSTALLER_RELEASE: ${{ startsWith(inputs.rid, 'win') && inputs.packaging == 'nsis' }}
      DEBIAN_INSTALLER_RELEASE: ${{ startsWith(inputs.rid, 'linux') && inputs.packaging == 'debian' }}
      ENABLE_UI_TESTING: ${{ inputs.enableUITesting }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.204

    # GitHub Actions Windows Runners come with NSIS pre-installed
    # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
    # No need to install here

    - name: Install CycloneDX SBOM tool
      run: dotnet tool install --global CycloneDX

    - name: Restore solution
      run: dotnet restore --nologo --verbosity quiet

    - name: Audit Pororoca.Desktop project
      shell: pwsh
      run: |
        $projectPath = "./src/Pororoca.Desktop/Pororoca.Desktop.csproj"
        $jsonObj = (dotnet list $projectPath package --vulnerable --include-transitive --format json) | ConvertFrom-Json;
        $hasAnyVulnerability = ($jsonObj.projects[0].frameworks -ne $null);
        if ($hasAnyVulnerability) {
          dotnet list package --vulnerable --include-transitive;
          exit 1;
        }

    - name: Build solution
      run: dotnet build --no-restore --configuration Release --nologo --verbosity quiet

    - name: Execute unit tests
      run: dotnet test --no-build --configuration Release --nologo --verbosity quiet --filter FullyQualifiedName!~Pororoca.Test.Tests

    - name: Read release version
      shell: pwsh
      run: |
        ([XML]$desktopCsprojXml = Get-Content ./src/Pororoca.Desktop/Pororoca.Desktop.csproj)
        $versionName = $desktopCsprojXml.Project.PropertyGroup.Version
        echo "VERSION_NAME=${versionName}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Generate SBOM file
      shell: pwsh
      run: dotnet CycloneDX ./src/Pororoca.Desktop/Pororoca.Desktop.csproj -o $env:OUTPUT_FOLDER -f sbom.json -sv $env:VERSION_NAME --json

    - name: Generate Pororoca Desktop dlls
      shell: pwsh
      run: |
        [void](New-Item $env:OUTPUT_FOLDER -ItemType Directory -ErrorAction Ignore);
        dotnet publish ./src/Pororoca.Desktop/Pororoca.Desktop.csproj `
        --verbosity quiet `
        --nologo `
        --configuration Release `
        -p:PublishSingleFile=${env:PUBLISH_SINGLE_FILE} `
        -p:PublishForInstallOnWindows=${env:WINDOWS_INSTALLER_RELEASE} `
        -p:PublishForInstallOnDebian=${env:DEBIAN_INSTALLER_RELEASE} `
        -p:UITestsEnabled=${env:ENABLE_UI_TESTING} `
        --self-contained true `
        --runtime ${env:RID} `
        --output ${env:OUTPUT_FOLDER};
        if ($env:RID -like "*win*")
        {
          # let's copy the msquic.dll file next to the generated .exe
          Copy-Item -Path "./src/Pororoca.Desktop/bin/Release/net8.0/${env:RID}/msquic.dll" -Destination $env:OUTPUT_FOLDER
        }

    - name: Rename executable
      shell: pwsh
      run: |
        if ($env:RID -like "*win*")
        {
          Rename-Item -Path "${env:OUTPUT_FOLDER}/Pororoca.Desktop.exe" -NewName "Pororoca.exe"
        }
        else
        {
          Rename-Item "${env:OUTPUT_FOLDER}/Pororoca.Desktop" -NewName "Pororoca"
        }

    - name: Set executable attributes (UNIX only)
      if: ${{ startsWith(inputs.rid, 'linux') || startsWith(inputs.rid, 'osx') }}
      shell: pwsh
      run: chmod +x "${env:OUTPUT_FOLDER}/Pororoca"

    - name: Make Pororoca.app structure (Mac OSX only)
      if: ${{ startsWith(inputs.rid, 'osx') }}
      shell: pwsh
      run: |
        [void](mkdir "${env:OUTPUT_FOLDER}/Pororoca.app")
        [void](mkdir "${env:OUTPUT_FOLDER}/Pororoca.app/Contents")
        [void](mkdir "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/MacOS")
        [void](mkdir "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/Resources")
        Copy-Item -Path "./src/Pororoca.Desktop.MacOSX/Info.plist" -Destination "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/"
        Copy-Item -Path "./src/Pororoca.Desktop.MacOSX/pororoca.icns" -Destination "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/Resources/"
        Get-ChildItem $env:OUTPUT_FOLDER -File | Copy-Item -Destination "${env:OUTPUT_FOLDER}/Pororoca.app/Contents/MacOS/" -Force
        Get-ChildItem $env:OUTPUT_FOLDER -File | Remove-Item

    # so Linux users can create desktop launchers
    - name: Copy logo (Linux only)
      if: ${{ startsWith(inputs.rid, 'linux') }}
      shell: pwsh
      run: Copy-Item -Path "./pororoca.png" -Destination $env:OUTPUT_FOLDER

    - name: Copy icon for Windows installer
      if: ${{ env.WINDOWS_INSTALLER_RELEASE == 'true' }}
      shell: pwsh
      run: Copy-Item -Path "./src/Pororoca.Desktop/Assets/pororoca_icon.ico" -Destination $env:OUTPUT_FOLDER

    - name: Copy licence
      shell: pwsh
      run: Copy-Item -Path "./LICENCE.md" -Destination $env:OUTPUT_FOLDER

    - name: Compress package
      if: ${{ inputs.packaging == null }}
      shell: pwsh
      run: |
        if ($env:RID -like "win*") {
          $zipName = "Pororoca_${env:VERSION_NAME}_${env:RID}_portable.zip";
        }
        elseif ($env:RID -like "osx*") {
          # temporary renaming while osx-arm64 doesn't work
          # osx-x64 works on Mac OSX ARM64
          $zipName = "Pororoca_${env:VERSION_NAME}_osx.zip";
        } else {
          $zipName = "Pororoca_${env:VERSION_NAME}_${env:RID}.zip";
        }
        if ($IsWindows) {
          Compress-Archive -CompressionLevel Optimal -Path $env:OUTPUT_FOLDER -DestinationPath "./out/${zipName}"
        } else {
          cd $env:OUTPUT_FOLDER
          zip -9 -r ../${zipName} *
          cd ../..
        }
        Remove-Item $env:OUTPUT_FOLDER -Force -Recurse -ErrorAction Ignore
        echo "OUTPUT_FILE_NAME=${zipName}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Make installer for Windows
      if: ${{ inputs.packaging == 'nsis' }}
      shell: pwsh
      run: |
        $installerFileName = "Pororoca_${env:VERSION_NAME}_${env:RID}_installer.exe";
        $installerOutFileAbsolutePath = $((Resolve-Path ".\out\").ToString()) + "\" + $installerFileName
        $installerFilesDirAbsolutePath = (Resolve-Path $env:OUTPUT_FOLDER).ToString()
        # makensis must be added to PATH
        # -WX ` # treat warnings as errors
        # -V2 ` # verbosity no info
        makensis -WX -V2 "/XOutFile ${installerOutFileAbsolutePath}" `
          "/DSHORT_VERSION=${env:VERSION_NAME}" `
          "/DINPUT_FILES_DIR=${installerFilesDirAbsolutePath}" `
          .\src\Pororoca.Desktop.WindowsInstaller\Installer.nsi
        Remove-Item $env:OUTPUT_FOLDER -Force -Recurse -ErrorAction Ignore
        echo "OUTPUT_FILE_NAME=${installerFileName}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Make Debian .deb package
      if: ${{ inputs.packaging == 'debian' }}
      shell: pwsh
      run: |
        $debPackageName = "Pororoca_${env:VERSION_NAME}_amd64.deb";
        [void](mkdir "./out/deb")
        # Debian control file
        [void](mkdir "./out/deb/DEBIAN")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/control" -Destination "./out/deb/DEBIAN"
        # Starter script
        [void](mkdir "./out/deb/usr")
        [void](mkdir "./out/deb/usr/bin")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca.sh" -Destination "./out/deb/usr/bin/pororoca"
        chmod +x "./out/deb/usr/bin/pororoca" # set executable permissions to starter script
        # Other files
        [void](mkdir "./out/deb/usr/lib")
        [void](mkdir "./out/deb/usr/lib/pororoca")
        Copy-Item -Path "${env:OUTPUT_FOLDER}/*" -Destination "./out/deb/usr/lib/pororoca" -Recurse -Force
        chmod -R a+rX "./out/deb/usr/lib/pororoca/" # set read permissions to all files
        chmod +x "./out/deb/usr/lib/pororoca/Pororoca" # set executable permissions to main executable
        # Desktop shortcut
        [void](mkdir "./out/deb/usr/share")
        [void](mkdir "./out/deb/usr/share/applications")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/Pororoca.desktop" -Destination "./out/deb/usr/share/applications/Pororoca.desktop"
        # Desktop icon
        # A 32x32 px XPM file in /usr/share/pixmaps/ (using 1024x1024 px PNG instead, like VS Code uses for its icon)
        [void](mkdir "./out/deb/usr/share/pixmaps")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_1024px.png" -Destination "./out/deb/usr/share/pixmaps/pororoca.png"
        # Hicolor icons
        [void](mkdir "./out/deb/usr/share/icons")
        [void](mkdir "./out/deb/usr/share/icons/hicolor")
        # A 16x16 px PNG file in /usr/share/icons/hicolor/16x16/apps/
        [void](mkdir "./out/deb/usr/share/icons/hicolor/16x16")
        [void](mkdir "./out/deb/usr/share/icons/hicolor/16x16/apps")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_16px.png" -Destination "./out/deb/usr/share/icons/hicolor/16x16/apps/pororoca.png"
        # A 32x32 px PNG file in /usr/share/icons/hicolor/32x32/apps/
        [void](mkdir "./out/deb/usr/share/icons/hicolor/32x32")
        [void](mkdir "./out/deb/usr/share/icons/hicolor/32x32/apps")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_32px.png" -Destination "./out/deb/usr/share/icons/hicolor/32x32/apps/pororoca.png"
        # A 48x48 px PNG file in /usr/share/icons/hicolor/48x48/apps/
        [void](mkdir "./out/deb/usr/share/icons/hicolor/48x48")
        [void](mkdir "./out/deb/usr/share/icons/hicolor/48x48/apps")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_48px.png" -Destination "./out/deb/usr/share/icons/hicolor/48x48/apps/pororoca.png"
        # A 64x64 px PNG file in /usr/share/icons/hicolor/64x64/apps/
        [void](mkdir "./out/deb/usr/share/icons/hicolor/64x64")
        [void](mkdir "./out/deb/usr/share/icons/hicolor/64x64/apps")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_64px.png" -Destination "./out/deb/usr/share/icons/hicolor/64x64/apps/pororoca.png"
        # A 128x128 px PNG file in /usr/share/icons/hicolor/128x128/apps/
        [void](mkdir "./out/deb/usr/share/icons/hicolor/128x128")
        [void](mkdir "./out/deb/usr/share/icons/hicolor/128x128/apps")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_128px.png" -Destination "./out/deb/usr/share/icons/hicolor/128x128/apps/pororoca.png"
        # A 256x256 px PNG file in /usr/share/icons/hicolor/256x256/apps/
        [void](mkdir "./out/deb/usr/share/icons/hicolor/256x256")
        [void](mkdir "./out/deb/usr/share/icons/hicolor/256x256/apps")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_256px.png" -Destination "./out/deb/usr/share/icons/hicolor/256x256/apps/pororoca.png"
        # A 512x512 px PNG file in /usr/share/icons/hicolor/512x512/apps/
        [void](mkdir "./out/deb/usr/share/icons/hicolor/512x512")
        [void](mkdir "./out/deb/usr/share/icons/hicolor/512x512/apps")
        Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_512px.png" -Destination "./out/deb/usr/share/icons/hicolor/512x512/apps/pororoca.png"
        # Optionally, an SVG file in /usr/share/icons/hicolor/scalable/apps/
        [void](mkdir "./out/deb/usr/share/icons/hicolor/scalable")
        [void](mkdir "./out/deb/usr/share/icons/hicolor/scalable/apps")
        Copy-Item -Path "./misc/pororoca_logo.svg" -Destination "./out/deb/usr/share/icons/hicolor/scalable/apps/pororoca.svg"
        # Make .deb file
        dpkg-deb --root-owner-group --build "./out/deb/" "./out/${debPackageName}"
        Remove-Item "./out/deb" -Force -Recurse -ErrorAction Ignore
        Remove-Item $env:OUTPUT_FOLDER -Force -Recurse -ErrorAction Ignore
        echo "OUTPUT_FILE_NAME=${debPackageName}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Upload artifact to workflow results
      if: ${{ inputs.uploadArtifactToRelease == false }} # no need if is uploading to release
      uses: actions/upload-artifact@v4
      with:
        compression-level: 0 # no need to compress because steps above already compress
        name: ${{ env.OUTPUT_FILE_NAME }}
        path: ${{ format('./out/{0}', env.OUTPUT_FILE_NAME) }}

    - name: Upload artifact to release
      if: ${{ inputs.uploadArtifactToRelease == true }}
      shell: pwsh
      run: gh release upload $env:RELEASE_NAME $env:FILE_PATH --clobber
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_NAME: ${{ env.VERSION_NAME }}
        FILE_PATH: ${{ format('./out/{0}', env.OUTPUT_FILE_NAME) }}
