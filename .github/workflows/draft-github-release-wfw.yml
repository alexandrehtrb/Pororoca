name: Draft GitHub release

on:
  # IMPORTANT: remember to forbid users from forked repos
  # from running actions
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - 'master'
    paths:
      - '.github/**'
      - 'src/**'
      - 'tests/**'
      - 'LICENCE.md'
      - 'Pororoca.sln'

jobs:

  draft-github-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Read release version
      shell: pwsh
      run: |
        ([XML]$desktopCsprojXml = Get-Content ./src/Pororoca.Desktop/Pororoca.Desktop.csproj)
        $versionName = $desktopCsprojXml.Project.PropertyGroup.Version
        echo "RELEASE_NAME=${versionName}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Check if release already exists
      shell: pwsh
      run: |
        $releasesList = (gh release list --json name,isDraft) | ConvertFrom-Json;
        $existingRelease = $releasesList | where { $_.Name -eq $env:RELEASE_NAME } | Select -First 1
        if ($existingRelease -eq $null)
        {
          echo "RELEASE_IS_DRAFTED=0" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        }
        elseif ($existingRelease.IsDraft -eq $True)
        {
          echo "RELEASE_IS_DRAFTED=1" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        }
        else
        {
          echo "This release exists and is published!";
          exit 1;
        }
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete pre-existing release assets
      if: ${{ env.RELEASE_IS_DRAFTED == '1' }}
      shell: pwsh
      run: |
        $releasesList = (gh api repos/alexandrehtrb/Pororoca/releases) | ConvertFrom-Json;
        $existingRelease = $releasesList | where { $_.Name -eq $env:RELEASE_NAME } | Select -First 1
        $assets = ($existingRelease.Assets | Select Name, Url)
        foreach ($asset in $assets)
        {
          echo "Deleting asset $($asset.Name)...";
          gh api --method DELETE $asset.Url
        }
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Draft GitHub release
      if: ${{ env.RELEASE_IS_DRAFTED == '0' }}
      run: gh release create $RELEASE_NAME --draft --latest --target master --title $RELEASE_NAME --notes "include notes here"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  nuget-and-sboms:
    needs: draft-github-release
    uses: ./.github/workflows/generate-nuget-and-sboms-wfw.yml
    with:
      uploadArtifactsToRelease: true

  linux-x64:
    needs: draft-github-release
    uses: ./.github/workflows/generate-desktop-wfw.yml
    with:
      os: ubuntu-latest
      rid: linux-x64
      enableUITesting: false
      uploadArtifactToRelease: true

  linux-x64-debian:
    needs: draft-github-release
    uses: ./.github/workflows/generate-desktop-wfw.yml
    with:
      os: ubuntu-latest
      rid: linux-x64
      packaging: debian
      enableUITesting: false
      uploadArtifactToRelease: true

  osx:
    needs: draft-github-release
    uses: ./.github/workflows/generate-desktop-wfw.yml
    with:
      os: ubuntu-latest
      rid: osx-x64
      enableUITesting: false
      uploadArtifactToRelease: true

  win-x64-installer:
    needs: draft-github-release
    uses: ./.github/workflows/generate-desktop-wfw.yml
    with:
      os: windows-latest # running on Windows because we need NSIS
      rid: win-x64
      packaging: nsis
      enableUITesting: false
      uploadArtifactToRelease: true

  win-x64-portable:
    needs: draft-github-release
    uses: ./.github/workflows/generate-desktop-wfw.yml
    with:
      os: ubuntu-latest # .NET 8 allows publishing for Windows on Linux machines
      rid: win-x64
      enableUITesting: false
      uploadArtifactToRelease: true

  win-x86-installer:
    needs: draft-github-release
    uses: ./.github/workflows/generate-desktop-wfw.yml
    with:
      os: windows-latest # running on Windows because we need NSIS
      rid: win-x86
      packaging: nsis
      enableUITesting: false
      uploadArtifactToRelease: true

  win-x86-portable:
    needs: draft-github-release
    uses: ./.github/workflows/generate-desktop-wfw.yml
    with:
      os: ubuntu-latest # .NET 8 allows publishing for Windows on Linux machines
      rid: win-x86
      enableUITesting: false
      uploadArtifactToRelease: true
